---
- name: Juniper switch check
  hosts: log
  connection: local
  gather_facts: no
# strategy: free

  tasks:
    - name: hostname
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | grep 'hostname' | awk '{print $2; exit}'
      ignore_errors: True
      register: Hostname

    - name: serial
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/{{ Hostname.stdout }}#show version/,/{{ Hostname.stdout }}#show processes cpu/p' | grep "System Serial Number" | awk '{print $5; exit}' | sort -u
      ignore_errors: True
      register: Serial

    - name: uptime
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/{{ Hostname.stdout }}#show version/,/{{ Hostname.stdout }}#show processes cpu/p' | grep "uptime" | awk '{print $4$5$6$7$8$9; exit}' | sort -u
      ignore_errors: True
      register: Uptime

    - name: version
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/{{ Hostname.stdout }}#show version/,/{{ Hostname.stdout }}#show processes cpu/p' | grep "*" | awk '{print $5; exit}'
      ignore_errors: True
      register: Version

    - name: cpu
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/{{ Hostname.stdout }}#show processes cpu/,/{{ Hostname.stdout }}#show processes memory/p' | grep "CPU" | awk '{print $12; exit}' | sed 's/%//g'
      ignore_errors: True
      register: CPU

    - name: arithmetic facs
      set_fact: set="{{ CPU.stdout }}"      

    - name: CPU utility compare
      debug: msg="{% if set|regex_search('\d+')|int < 60 %}CPU state OK{% else %}CPU state check{% endif %}"
      register: CPU_state
      
    - name: memory Total
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/{{ Hostname.stdout }}#show processes memory/,/{{ Hostname.stdout }}#show environment all/p' | grep "Processor" | awk '{print $4; exit}'
      ignore_errors: True
      register: memTotal

    - name: memory Total
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/{{ Hostname.stdout }}#show processes memory/,/{{ Hostname.stdout }}#show environment all/p' | grep "Processor" | awk '{print $6; exit}'
      ignore_errors: True
      register: memUse

    - name: arithmetic facs2
      set_fact: USE="{{ memUse.stdout|regex_search('\d+')|int / memTotal.stdout|regex_search('\d+')|int * 100}}"

    - name: split_cpu
      set_fact: memS="{{ USE.split('.') }}"

    - name: Memory utility compare
      debug: msg={{ memS.0 }}   

    - name: Memory utility compare
      debug: msg="{% if memS.0|regex_search('\d+')|int < 70 %}MEM state OK{% else %}MEM state check{% endif %}"
      register: MEM_state

    - name: fan
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log| sed -n '/Switch   FAN/,/SYSTEM TEMPERATURE/p'
      ignore_errors: True
      register: Fan

    - name: FAN check
      debug: msg="{% if 'FAULTY' in Fan.stdout %}Check{% else %}Fan state OK{% endif %}"
      ignore_errors: True
      register: Fan_state

    - name: temp
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log| sed -n '/{{ Hostname.stdout }}#show environment all/,/{{ Hostname.stdout }}#show interfaces status err-disabled/p' | grep "Temperature State:" | sort -u
      ignore_errors: True
      register: Temp

    - name: TEMP check
      debug: msg="{% if 'YELLOW' in Temp.stdout %}Check{% elif 'RED' in Temp.stdout %}Check{% else %}Temp state OK{% endif %}"
      ignore_errors: True
      register: Temp_state      

    - name: power
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log| sed -n '/SW  PID/,/{{ Hostname.stdout }}#show interfaces status err-disabled/p'
      ignore_errors: True
      register: Power

    - name: Power check
      debug: msg="{% if 'Not Responding' in Power.stdout %}Check{% elif 'Failure-Fan' in Power.stdout %}Check{% elif 'FAULTY' in Power.stdout %}Check{% else %}Power state OK{% endif %}"
      ignore_errors: True
      register: Power_state        

    - name: int_error
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/Port         Name               Status/,/{{ Hostname.stdout }}#show logging/p' | grep "err-disabled" | awk '{print $1}' | tr '\n' ','
      ignore_errors: True
      register: Int_Error

    - name: crc_error
      shell: cat Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log | sed -n '/OutDiscards/,/Runts/p'| awk '{if ($3>100){ print $1 }}' | sed 's/Port//g' | sed 's/ //g' | tr '\n' ','
      ignore_errors: True
      register: Crc_Error
      
    - name: Make Result Directory
      local_action:
        module: file
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}"
        state: directory
        mode: u=rwX,g=rX,o=rX

    - name: Result summary
      local_action:
        copy content="{{ Hostname.stdout }}#|{{ Serial.stdout }}|{{ Uptime.stdout }}|{{ Version.stdout }}|{{ CPU_state}}|{{ MEM_state}}|{{ Fan_state }}|{{ Temp_state }}|{{ Power_state }}|{{ Int_Error.stdout }}|{{ Crc_Error.stdout }}"
        dest="Result/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.log"

    - name: Assemble from fragments from a directory
      assemble:
        src: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}"
        dest: "Result/cisco.log"
      ignore_errors: True

    - name: Result modify1
      replace:
        path: "Result/cisco.log"
        regexp: "', 'failed': False, 'changed': False}"
        replace: ""

    - name: Result modify1
      replace:
        path: "Result/cisco.log"
        regexp: "'msg': u'"
        replace: ""

    - name: Result modify1
      replace:
        path: "Result/cisco.log"
        regexp: "{'msg': '"
        replace: ""

    - name: Result modify1
      replace:
        path: "Result/cisco.log"
        regexp: "{'msg': '"
        replace: ""

    - name: Result modify2
      replace:
        path: "Result/cisco.log"
        regexp: "'failed': False, 'changed': False"
        replace: ""

    - name: Result modify3
      replace:
        path: "Result/cisco.log"
        regexp: "',"
        replace: ""

    - name: Result modify4
      replace:
        path: "Result/cisco.log"
        regexp: "{"
        replace: ""

    - name: Result modify5
      replace:
        path: "Result/cisco.log"
        regexp: "}"
        replace: ""

    - name: To excel
      shell: python3 To_excel.py